"use strict";(self.webpackChunkahlek=self.webpackChunkahlek||[]).push([[6814],{2160:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorial-doc.md/linux-basic/a-bit-of-plumbing","title":"7. A bit of Plumbing","description":"Today\u2019s computers and phones have the sort of graphical and audio capabilities that our 70s terminal users couldn\u2019t even begin to imagine. Yet still text prevails as a means to organise and categorise files. Whether it\u2019s the file name itself, GPS coordintates embedded in photos you take on your phone, or the metadata stored in an audio file, text still plays a vital role in every aspect of computing. It\u2019s fortunate for us that the Linux command line includes some powerful tools for manipulating text content, and ways to join those tools together to create something more capable still.","source":"@site/docs/tutorial-doc.md/linux-basic/a-bit-of-plumbing.md","sourceDirName":"tutorial-doc.md/linux-basic","slug":"/tutorial-doc.md/linux-basic/a-bit-of-plumbing","permalink":"/lek/docs/tutorial-doc.md/linux-basic/a-bit-of-plumbing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"practicalSidebar","previous":{"title":"6. Moving and Manipulating Files","permalink":"/lek/docs/tutorial-doc.md/linux-basic/moving-and-manipulating-files"},"next":{"title":"8. The Command Line and the Superuser","permalink":"/lek/docs/tutorial-doc.md/linux-basic/the-command-line-and-the-superuser"}}');var i=n(4848),a=n(8453);const s={sidebar_position:7},r="7. A bit of Plumbing",l={},c=[];function d(e){const t={code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"7-a-bit-of-plumbing",children:"7. A bit of Plumbing"})}),"\n",(0,i.jsx)(t.p,{children:"Today\u2019s computers and phones have the sort of graphical and audio capabilities that our 70s terminal users couldn\u2019t even begin to imagine. Yet still text prevails as a means to organise and categorise files. Whether it\u2019s the file name itself, GPS coordintates embedded in photos you take on your phone, or the metadata stored in an audio file, text still plays a vital role in every aspect of computing. It\u2019s fortunate for us that the Linux command line includes some powerful tools for manipulating text content, and ways to join those tools together to create something more capable still."}),"\n",(0,i.jsxs)(t.p,{children:["Let\u2019s start with a simple question. How many lines are there in your combined.txt file? The ",(0,i.jsx)(t.code,{children:"wc"})," (word count) command can tell us that, using the ",(0,i.jsx)(t.code,{children:"-l"})," switch to tell it we only want the line count (it can also do character counts and, as the name suggests, word counts):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"wc -l combined.txt\n"})}),"\n",(0,i.jsx)(t.p,{children:"Similarly, if you wanted to know how many files and folders are in your home directory, and then tidy up after yourself, you could do this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"ls ~ > file_list.txt\nwc -l file_list.txt\nrm file_list.txt\n"})}),"\n",(0,i.jsxs)(t.p,{children:["That method works, but creating a temporary file to hold the output from ls only to delete it two lines later seems a little excessive. Fortunately the Unix command line provides a shortcut that avoids you having to create a temporary file, by taking the output from one command (referred to as standard output or STDOUT) and feeding it directly in as the input to another command (standard input or STDIN). It\u2019s as though you\u2019ve connected a pipe between one command\u2019s output and the next command\u2019s input, so much so that this process is actually referred to as piping the data from one command to another. Here\u2019s how to pipe the output of our ",(0,i.jsx)(t.code,{children:"ls"})," command into ",(0,i.jsx)(t.code,{children:"wc"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"ls ~ | wc -l\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Notice that there\u2019s no temporary file created, and no file name needed. Pipes operate entirely in memory, and most Unix command line tools will expect to receive input from a pipe if you don\u2019t specify a file for them to work on. Looking at the line above, you can see that it\u2019s two commands, ",(0,i.jsx)(t.code,{children:"ls ~"})," (list the contents of the home directory) and ",(0,i.jsx)(t.code,{children:"wc -l"})," (count the lines), separated by a vertical bar character (\u201c",(0,i.jsx)(t.code,{children:"|"}),"\u201d). This process of piping one command into another is so commonly used that the character itself is often referred to as the pipe character, so if you see that term you now know it just means the vertical bar."]}),"\n",(0,i.jsx)(t.p,{children:"Note that the spaces around the pipe character aren\u2019t important, we\u2019ve used them for clarity, but the following command works just as well, this time for telling us how many items are in the /etc directory:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"ls /etc|wc -l\n"})}),"\n",(0,i.jsx)(t.p,{children:"Phew! That\u2019s quite a few files. If we wanted to list them all it would clearly fill up more than a single screen. As we discovered earlier, when a command produces a lot of output, it\u2019s better to use less to view it, and that advice still applies when using a pipe (remember, press q to quit):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"ls /etc | less\n"})}),"\n",(0,i.jsx)(t.p,{children:"Going back to our own files, we know how to get the number of lines in combined.txt, but given that it was created by concatenating the same files multiple times, I wonder how many unique lines there are? Unix has a command, uniq, that will only output unique lines in the file. So we need to cat the file out and pipe it through uniq. But all we want is a line count, so we need to use wc as well. Fortunately the command line doesn\u2019t limit you to a single pipe at a time, so we can continue to chain as many commands as we need:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"cat combined.txt | uniq | wc -l\n"})}),"\n",(0,i.jsx)(t.p,{children:"That line probably resulted in a count that\u2019s pretty close to the total number of lines in the file, if not exactly the same. Surely that can\u2019t be right? Lop off the last pipe to see the output of the command for a better idea of what\u2019s happening. If your file is very long, you might want to pipe it through less to make it easier to inspect:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"cat combined.txt | uniq | less\n"})}),"\n",(0,i.jsxs)(t.p,{children:["It appears that very few, if any, of our duplicate lines are being removed. To understand why, we need to look at the documentation for the uniq command. Most command line tools come with a brief (and sometimes not-so-brief) instruction manual, accessed through the ",(0,i.jsx)(t.code,{children:"man"})," (manual) command. The output is automatically piped through your pager, which will typically be less, so you can move back and forth through the output, then press q when you\u2019re finished:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"man uniq\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt text",src:n(5972).A+"",width:"779",height:"466"})}),"\n",(0,i.jsx)(t.p,{children:"Because this type of documentation is accessed via the man command, you\u2019ll hear it referred to as a \u201cman page\u201d, as in \u201ccheck the man page for more details\u201d. The format of man pages is often terse, think of them more as a quick overview of a command than a full tutorial. They\u2019re often highly technical, but you can usually skip most of the content and just look for the details of the option or argument you\u2019re using."}),"\n",(0,i.jsx)(t.p,{children:"The uniq man page is a typical example in that it starts with a brief one-line description of the command, moves on to a synopsis of how to use it, then has a detailed description of each option or parameter. But whilst man pages are invaluable, they can also be inpenetrable. They\u2019re best used when you need a reminder of a particular switch or parameter, rather than as a general resource for learning how to use the command line. Nevertheless, the first line of the DESCRIPTION section for man uniq does answer the question as to why duplicate lines haven\u2019t been removed: it only works on adjacent matching lines."}),"\n",(0,i.jsxs)(t.p,{children:["The question, then, is how to rearrange the lines in our file so that duplicate entries are on adjacent lines. If we were to sort the contents of the file alphabetically, that would do the trick. Unix offers a ",(0,i.jsx)(t.code,{children:"sort"})," command to do exactly that. A quick check of ",(0,i.jsx)(t.code,{children:"man sort"})," shows that we can pass a file name directly to the command, so let\u2019s see what it does to our file:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"sort combined.txt | less\n"})}),"\n",(0,i.jsx)(t.p,{children:"You should be able to see that the lines have been reordered, and it\u2019s now suitable for piping straight into uniq. We can finally complete our task of counting the unique lines in the file:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"sort combined.txt | uniq | wc -l\n"})}),"\n",(0,i.jsx)(t.p,{children:"As you can see, the ability to pipe data from one command to another, building up long chains to manipulate your data, is a powerful tool, as well as reducing the need for temporary files, and saving you a lot of typing. For this reason you\u2019ll see it used quite often in command lines. A long chain of commands might look intimidating at first, but remember that you can break even the longest chain down into individual commands (and look at their man pages) to get a better understanding of what it\u2019s doing."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5972:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/image-8-724fad7912f2ae2ca353d21aa8618f5c.png"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var o=n(6540);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);